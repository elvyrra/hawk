#!/usr/bin/php

<?php
define('PLUGINS_DIR', __DIR__ . '/../plugins/');
define('MAIN_PLUGINS_DIR', __DIR__ . '/../main-plugins/');
$parameters = array(
    'name' => array(
        'question' => 'What is the name of the plugin (authorized caracters : alphanumeric, "-", "_") :',
        'regex' => '/^[\w\-]+$/'
    ),

    'title' => array(
        'question' => 'Give a short title to the plugin :',
        'regex' => '/^.+$/'
    ),

    'description' => array(
        'question' => 'Description :',
        'regex' => '/^.*$/'
    ),

    'version' => array(
        'question' => 'Version (default : 1.0.0) :',
        'regex' => '/^((\d+\.){2,3}\d+)?$/'
    ),

    'author' => array(
        'question' => 'Author :',
        'regex' => '/^.*$/'        
    ),
);

$data = array();
foreach($parameters as $param => $options){
    // Get the plugin name
    do{
        echo $options['question'];
        $data[$param] = trim(fgets(STDIN));
        if($param == 'name' && (is_dir(PLUGINS_DIR . $data[$param]) || is_dir(MAIN_PLUGINS_DIR . $data[$param]))){
            echo "\033[0;31mThis plugin name already exists, please choose another name\n\033[0m";
            $data[$param] = '';
        }
    }
    while(!preg_match($options['regex'], $data[$param]));
}

$dir = PLUGINS_DIR . $data['name'] ;

// make plugin structure
`mkdir $dir`;
`mkdir $dir/controllers`;
`mkdir $dir/models`;
`mkdir $dir/classes`;
`mkdir $dir/views`;
`mkdir $dir/static`;
`mkdir $dir/widgets`;
`mkdir $dir/lang`;
`touch $dir/start.php`;
`touch $dir/manifest.json`;

// Construct the manifest.json file
$installerClass = str_replace(' ', '', ucwords(str_replace(array('-', '_'), ' ', $data['name']))) . 'Installer';

$conf = array(
    'title' => $data['title'],
    'description' => $data['description'],
    'version' => $data['version'] ? $data['version'] : '1.0.0',
    'author' => $data['author'],
    'installer' => $installerClass,
    'dependencies' => array()
);

file_put_contents($dir . '/manifest.json', json_encode($conf, JSON_PRETTY_PRINT));

// Construct the installer class file
$installerContent = 
"<?php
/**
 * {$installerClass}.class.php
 */



/**
 * This class describes the behavio of the installer for the plugin {$data['name']}
 */
class {$installerClass} extends PluginInstaller{
    const PLUGIN_NAME = '{$data['name']}';
    
    /**
     * Install the plugin. This method is called on plugin installation, after the plugin has been inserted in the database
     */
    public function install(){
        
    }

    /**
     * Uninstall the plugin. This method is called on plugin uninstallation, after it has been removed from the database
     */
    public function uninstall(){
        
    }

    /**
     * Activate the plugin. This method is called when the plugin is activated, just after the activation in the database
     */
    public function activate(){
        
    }
    
    /**
     * Deactivate the plugin. This method is called when the plugin is deactivated, just after the deactivation in the database
     */
    public function deactivate(){
        
    }

    /**
     * Configure the plugin. This method contains a page that display the plugin configuration. To treat the submission of the configuration
     * you'll have to create another method, and make a route which action is this method. Uncomment the following function only if your plugin if 
     * configurable.
     */
    /*
    public function settings(){

    }
    */
}
";

file_put_contents($dir . '/classes/' . $installerClass . '.class.php', $installerContent);

echo 'Plugin ' , $data['name'] . ' successfully created'  , PHP_EOL;